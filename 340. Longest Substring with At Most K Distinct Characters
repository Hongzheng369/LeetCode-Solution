class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (s == null || s.length() == 0 || k == 0) {
            return 0;
        }
        
        HashMap<Character, Integer> indexMapping = new HashMap<>();
        int minIndex = -1, maxIndex, maxLen = Integer.MIN_VALUE;

        for (int i = 0; i < s.length(); i++) {
            indexMapping.put(s.charAt(i), i);
            maxIndex = i;

            if (indexMapping.size() > k) {
                char removeChar = '?';
                minIndex = Integer.MAX_VALUE;
                for (char ch : indexMapping.keySet()) {
                    if (indexMapping.get(ch) < minIndex) {
                        minIndex = indexMapping.get(ch);
                        removeChar = ch;
                    }
                }
                indexMapping.remove(removeChar);
            }

            maxLen = Math.max(maxLen, maxIndex - minIndex);
        }

        return maxLen;
    }
}
