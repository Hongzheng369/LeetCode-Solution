class Solution {
    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0) {
            return true;
        }
        int row = board.length;
        int col = board[0].length;
        int len = word.length();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (helpFindWord(board, word, i, j, 0, row, col, len)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean helpFindWord(char[][] board, String word, int i, int j, int pos, int row, int col, int len) {
        if (i < 0 || i > row - 1 || j < 0 || j > col - 1) {
            return false;
        }
        if (board[i][j] == word.charAt(pos)) {
            if (pos == len - 1) {
                return true;
            }
            char temp = board[i][j];
            board[i][j] = '$';
            if (helpFindWord(board, word, i - 1, j, pos + 1, row, col, len) || 
                    helpFindWord(board, word, i + 1, j, pos + 1, row, col, len) ||
                    helpFindWord(board, word, i, j - 1, pos + 1, row, col, len) ||
                    helpFindWord(board, word, i, j + 1, pos + 1, row, col, len)) {
                return true;
            }
            board[i][j] = temp;
        }
        return false;
    }
}
