class Solution {
    public boolean exist(char[][] board, String word) {
        int row = board.length;
        int col = board[0].length;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (findWord(board, i, j, row, col, word, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean findWord(char[][] board, int i, int j, int row, int col, String word, int pos) {
        if (i < 0 || i >= row || j < 0 || j >= col || board[i][j] != word.charAt(pos)) {
            return false;
        }
        if (pos == word.length() - 1) {
            return true;
        }
        
        char temp = board[i][j];
        board[i][j] = '$';
        if (findWord(board, i + 1, j, row, col, word, pos + 1) || 
            findWord(board, i - 1, j, row, col, word, pos + 1) || 
            findWord(board, i, j + 1, row, col, word, pos + 1) || 
            findWord(board, i, j - 1, row, col, word, pos + 1)) {
            return true;
        }
        
        board[i][j] = temp;
        return false;
    }
}
