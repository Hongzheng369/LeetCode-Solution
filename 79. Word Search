/**     
 * In this case, DFS is used and it has better space complexity.
 * Time complexity is O(rows * col * 4 ^ len).
 * Space complexity is O(rows * col + len).
 */
 
class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0) {
        	return false;
        }
        
        int rows = board.length, cols = board[0].length;
        for (int i = 0; i < rows; i++) {
        	for (int j = 0; j < cols; j++) {
        		if (helper(board, i, j, word, 0)) {
        			return true;
        		}
        	}
        }
        
        return false;
    }
	
	private boolean helper(char[][] board, int i, int j, String word, int pos) {
		if (i < 0 || i > board.length - 1 || j < 0 || j > board[0].length - 1) {
			return false;
		}
		
		if (board[i][j] == word.charAt(pos)) {
			if (pos == word.length() - 1) {
				return true;
			}
			
			char temp = board[i][j];
			board[i][j] = '#';
			
			if (helper(board, i - 1, j, word, pos + 1) || 
					helper(board, i + 1, j, word, pos + 1) || 
					helper(board, i, j - 1, word, pos + 1) ||
					helper(board, i, j + 1, word, pos + 1)) {
				return true;
			}
			board[i][j] = temp;
		}
		
		return false;
	}
}
