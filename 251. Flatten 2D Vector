// My solution: expand it first.
/*
class Vector2D {
    List<Integer> list;
    
    public Vector2D(int[][] v) {
        list = new ArrayList<>();
        
        for (int i = 0; i < v.length; i++) {
            for (int j = 0; j < v[i].length; j++) {
                list.add(v[i][j]);
            }
        }
    }
    
    public int next() {
        return list.remove(0);
    }
    
    public boolean hasNext() {
        return !list.isEmpty();
    }
}*/

// Better solution: two pointers.
/*
class Vector2D {
    int row;
    int col;
    int[][] matrix;
    
    public Vector2D(int[][] v) {
        row = 0;
        col = 0;
        matrix = v;
    }
    
    public int next() {
        if (col == matrix[row].length) {
            row++;
            col = 0;
        } 
        
        return matrix[row][col++];
    }
    
    public boolean hasNext() {
        while (row < matrix.length && col == matrix[row].length) {
            row++;
            col = 0;
        }
        
        return row < matrix.length;
    }
}*/

// Better solution: iterator in Java.
class Vector2D {
    List<List<Integer>> matrix;
    Iterator<List<Integer>> row;
    Iterator<Integer> col;
    
    public Vector2D(int[][] v) {
        matrix = new ArrayList<>();
        
        for (int[] row : v) {
            if (row != null && row.length != 0) {
                List<Integer> temp = new ArrayList<>();
                for (int num : row) {
                    temp.add(num);
                }
                matrix.add(temp);
            }
        }
        
        row = matrix.iterator();
    }
    
    public int next() {
        hasNext();
        return col.next();
    }
    
    public boolean hasNext() {
        if ((col == null || !col.hasNext()) && row.hasNext()) {
            col = row.next().iterator();
        }
        
        return col != null && col.hasNext();
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D obj = new Vector2D(v);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
