class Solution {
    // Method 1: same method as Question 300.
    /*
    public boolean increasingTriplet(int[] nums) {
        if (nums == null) {
            return false;
        }
        int len = nums.length;
        if (len < 3) {
            return false;
        }
        
        int[] ans = new int[len];
        for (int i = 0; i < len; i++) {
            ans[i] = 1;
        }
        
        for (int i = 1; i < len; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    ans[i] = Math.max(ans[i], ans[j] + 1);
                    if (ans[i] > 2) {
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
    */
    
    // Method 2.
    public boolean increasingTriplet(int[] nums) {
        int small = Integer.MAX_VALUE, big = Integer.MAX_VALUE;
        for (int n : nums) {
            // n is smaller than both.
            if (n <= small) { 
                small = n; 
            }
            // n is larger than small but smaller than big.
            else if (n <= big) { 
                big = n; 
            } 
            // return if you find a number bigger than both.
            else {
                return true; 
            }
        }
        return false;
    }
}
