class Solution {
    /*
    HashMap<Character, Integer> priority = new HashMap<>();
    
    public boolean isAlienSorted(String[] words, String order) {
        int prior = 0;
        for (char c : order.toCharArray()) {
            priority.put(c, prior++);
        }
        
        for (int i = 0; i < words.length - 1; i++) {
            if (compareString(words[i], words[i + 1]) > 0) {
                return false;
            }
        }
        
        return true;
    }
    
    private int compareString(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();
        char[] chars1 = s1.toCharArray();
        char[] chars2 = s2.toCharArray();

        for (int i = 0; i < len1 && i < len2; i++) {
            if (chars1[i] != chars2[i]) {
                return priority.get(chars1[i]) - priority.get(chars2[i]);
            }
        }

        return len1 - len2;
    }
    */
    
    int[] priority = new int[26];
    
    public boolean isAlienSorted(String[] words, String order) {
        int prior = 0;
        for (char c : order.toCharArray()) {
            priority[c - 'a'] = prior;
            prior++;
        }
        
        for (int i = 0; i < words.length - 1; i++) {
            if (compareString(words[i], words[i + 1]) > 0) {
                return false;
            }
        }
        
        return true;
    }
    
    private int compareString(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();
        char[] chars1 = s1.toCharArray();
        char[] chars2 = s2.toCharArray();

        for (int i = 0; i < len1 && i < len2; i++) {
            if (chars1[i] != chars2[i]) {
                return priority[chars1[i] - 'a'] - priority[chars2[i] - 'a'];
            }
        }

        return len1 - len2;
    }
}
