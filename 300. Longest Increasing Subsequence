class Solution {
    // Method 1: using a 2D matrix to memorize the previous result,
    // ... and then update the answer.
    // Time: O(n2); Space: O(n2).
    /*
    public int lengthOfLIS(int[] nums) {
        int[][] memo = new int[nums.length + 1][nums.length];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        
        return helpGetLength(nums, -1, 0, memo);
    }
    
    private int helpGetLength(int[] nums, int prevIdx, int currIdx, int[][] memo) {
        if (currIdx == nums.length) {
            return 0;
        }
        if (memo[prevIdx + 1][currIdx] > -1) {
            return memo[prevIdx + 1][currIdx];
        }
        
        int taken = 0;
        if (prevIdx < 0 || nums[currIdx] > nums[prevIdx]) {
            taken = helpGetLength(nums, currIdx, currIdx + 1, memo) + 1;
        }
        
        int notTaken = helpGetLength(nums, prevIdx, currIdx + 1, memo);
        
        memo[prevIdx + 1][currIdx] = Math.max(taken, notTaken);
        return memo[prevIdx + 1][currIdx];
    }*/
    
    // Method 2: using a 1D array to memorize the result.
    // ... and then update the answer.
    // Time: O(n2); Space: O(n);
    /*
    public int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] dp = new int[nums.length];
        dp[0] = 1;
        int ans = 1;
        
        for (int i = 1; i < nums.length; i++) {
            int maxValue = 0;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    maxValue = Math.max(maxValue, dp[j]);
                }
            }
            
            dp[i] = maxValue + 1;
            ans = Math.max(ans, dp[i]);
        }
        
        return ans;
    }*/
    
    // Method 3: using a 1D array to memorize the result.
    // Time: O(nlogn); Space: O(n).
    public int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] dp = new int[nums.length];
        int len = 1;
        dp[0] = nums[0];
        
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < dp[0]) {
                dp[0] = nums[i];
            } else if (nums[i] > dp[len - 1]) {
                dp[len++] = nums[i];
            } else {
                int index = returnIndex(dp, -1, len - 1, nums[i]);
                dp[index] = nums[i];
            }
        }
        
        return len;
    }
    
    private int returnIndex(int[] dp, int left, int right, int num) {
        while (right - left > 1) {
            int mid = left + (right - left) / 2;
            if (dp[mid] >= num) {
                right = mid;
            } else {
                left = mid;
            }
        }
        
        return right;
    }
}
