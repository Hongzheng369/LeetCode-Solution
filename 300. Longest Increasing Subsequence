// Method 1: use an 2D matrix to save the result.
class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[][] possi = new int[nums.length + 1][nums.length];
        for (int[] row : possi) {
            Arrays.fill(row, -1);
        }
        
        return lengthOfPossi(nums, -1, 0, possi);
    }
    
    private int lengthOfPossi(int[] nums, int preIdx, int curIdx, int[][] possi) {
        // Base cases.
        if (curIdx == nums.length) {
            return 0;
        }
        if (possi[preIdx + 1][curIdx] > -1) {
            return possi[preIdx + 1][curIdx];
        }

        // If include the current element:
        int take = 0;
        if (preIdx < 0 || nums[curIdx] > nums[preIdx]) {
            take = lengthOfPossi(nums, curIdx, curIdx + 1, possi) + 1;
        }
        // If not include the current element:
        int notTake = lengthOfPossi(nums, preIdx, curIdx + 1, possi);
        
        possi[preIdx + 1][curIdx] = Math.max(take, notTake);
        return possi[preIdx + 1][curIdx];
    }
}

// Method 2: use an 1D array to compress the result.
class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] length = new int[nums.length];
        length[0] = 1;
        int maxLength = 1;
        
        for (int i = 1; i < nums.length; i++) {
            int maxPreLength = 0;
            
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    maxPreLength = Math.max(maxPreLength, length[j]);
                }
            }
            
            length[i] = maxPreLength + 1;
            maxLength = Math.max(maxLength, length[i]);
        }
        
        return maxLength;
    }
}
