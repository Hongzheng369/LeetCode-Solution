/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s == null && t == null) {
            return true;
        }
        else if (s == null || t == null) {
            return false;
        }
        List<TreeNode> list = new ArrayList<>();
        findNode(s, t, list);
        boolean ans = false;
        for (int i = 0; i < list.size(); i++) {
            ans = ans | isSame(list.get(i), t);
            if (ans) {
                break;
            }
        }
        return ans;
    }

    private void findNode(TreeNode s, TreeNode t, List<TreeNode> list) {
        if (s == null) {
            return;
        }
        if (s.val == t.val) {
            list.add(s);
        }
        findNode(s.left, t, list);
        findNode(s.right, t, list);
        return;
    }

    private boolean isSame(TreeNode s, TreeNode t) {
        if (s == null && t == null) {
            return true;
        }
        else if (s == null || t == null) {
            return false;
        }
        else if (s.val != t.val) {
            return false;
        }
        return isSame(s.left, t.left) && isSame(s.right, t.right);
    }
}
