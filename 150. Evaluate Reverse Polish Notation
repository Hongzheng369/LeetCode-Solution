class Solution {
    // Method 1: Using a stack.
    /*
    public int evalRPN(String[] tokens) {
        if (tokens == null || tokens.length == 0) {
            return 0;
        }
        
        Stack<Integer> stack = new Stack<>();
        
        for (String s : tokens) {
            if (isNum(s)) {
                stack.push(Integer.parseInt(s));
            } else {
                if (s.equals("+")) {
                    stack.push(stack.pop() + stack.pop());
                } else if (s.equals("-")) {
                    int a = stack.pop();
                    int b = stack.pop();
                    stack.push(b - a);
                } else if (s.equals("*")) {
                    stack.push(stack.pop() * stack.pop());
                } else if (s.equals("/")) {
                    int a = stack.pop();
                    int b = stack.pop();
                    stack.push(b / a);
                }
            }        
        }
        
        return stack.pop();
    }
    
    private boolean isNum(String s) {
        char ch = s.charAt(s.length() - 1);
        return (ch >= '0' && ch <= '9');
    }*/
    
    // Method 2: Using an array.
    public int evalRPN(String[] tokens) {
        int[] stack = new int[tokens.length / 2 + 1];
        int index = 0;
        
        for(String token : tokens) {
            switch(token) {
                case "+":
                    stack[index - 2] = stack[index - 2] + stack[index - 1];
                    index--;
                    break;
                    
                case "-":
                    stack[index - 2] = stack[index - 2] - stack[index - 1];
                    index--;
                    break;
                    
                case "*":
                    stack[index - 2] = stack[index - 2] * stack[index - 1];
                    index--;
                    break;
                    
                case "/":
                    stack[index - 2] = stack[index - 2] / stack[index - 1];
                    index--;
                    break;
                    
                default:
                    stack[index++] = Integer.parseInt(token);
                    break;
            }
        }
        
        return stack[0];
    }
}
