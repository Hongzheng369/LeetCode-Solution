/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    // Method 0: use extra data structure like List<TreeNode>,
    // ... and perform preorder traversal,
    // ... then connect these nodes.
    
    // Method 1: recursion and use an extra function.
    /*
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        helpFlatten(root, null);
        return;
    }
    
    private TreeNode helpFlatten(TreeNode root, TreeNode pre) {
        if (root == null) {
            return pre;
        }
        pre = helpFlatten(root.right, pre);
        pre = helpFlatten(root.left, pre);
        root.right = pre;
        root.left = null;
        return root;
    }*/
    
    // Method 2: recursively using a variable outside the function.
    /*
    TreeNode prev = null;
    
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        flatten(root.right);
        flatten(root.left);
        root.left = null;
        root.right = prev;
        prev = root;
    }*/
    
    // Method 3: iteration.
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        TreeNode node = root;
        while (node != null) {
            if (node.left != null) {
                TreeNode prev = node.left;
                while (prev.right != null) {
                    prev = prev.right;
                }
                prev.right = node.right;
                node.right = node.left;
                node.left = null;
            }
            node = node.right;
        }
    }
}
