class Solution {
    Map<String, HashMap<String, Double>> map = new HashMap<>();

    public double[] calcEquation(String[][] equations, double[] values, String[][] queries) {
        for (int i = 0; i < equations.length; i++) {
            if (!map.containsKey(equations[i][0])) {
                map.put(equations[i][0], new HashMap<>());
            }
            if (!map.containsKey(equations[i][1])) {
                map.put(equations[i][1], new HashMap<>());
            }
            map.get(equations[i][0]).put(equations[i][1], values[i]);
            map.get(equations[i][1]).put(equations[i][0], 1.0 / values[i]);
        }

        double[] ans = new double[queries.length];

        for (int i = 0; i < queries.length; i++) {
            if (!map.containsKey(queries[i][0]) || !map.containsKey(queries[i][1])) {
                ans[i] = -1.0;
            }
            else {
                ans[i] = divide(queries[i][0], queries[i][1], new HashSet<String>());
            }
        }

        return ans;
    }

    public double divide(String x, String y, HashSet<String> visited) {
        if (x.equals(y)) {
            return 1.0;
        }

        visited.add(x);

        for (String s : map.get(x).keySet()) {
            if (visited.contains(s)) {
                continue;
            }
            visited.add(s);
            double d = divide(s, y, visited);
            if (d > 0) {
                return d * map.get(x).get(s);
            }
        }

        return -1.0;
    }
}
