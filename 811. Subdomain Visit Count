class Solution {
    // Method 1.
    /*
    public List<String> subdomainVisits(String[] cpdomains) {
        HashMap<String, Integer> map = new HashMap<>();
        
        for (String domain : cpdomains) {
            String[] parts = domain.split(" ");
            String[] frags = parts[1].split("\\.");
            
            int count = Integer.valueOf(parts[0]);
            String cur = frags[frags.length - 1];
            map.put(cur, map.getOrDefault(cur, 0) + count);
            
            for (int i = frags.length - 2; i > -1; i--) {
                cur = frags[i] + "." + cur;
                map.put(cur, map.getOrDefault(cur, 0) + count);
            }
        }
        
        List<String> ans = new ArrayList();
        for (String s : map.keySet()) {
            ans.add(map.get(s) + " " + s);
        }
        return ans;
    }*/
    
    // Method 2. Not using String.split() method will be faster.
    
    public List<String> subdomainVisits(String[] cpdomains) {
        List<String> ans = new ArrayList<>();
        if (cpdomains == null || cpdomains.length == 0) {
            return ans;
        }
        
        Map<String, Integer> count = new HashMap<>();
        for (int i = 0; i < cpdomains.length; i++) {
            countDomains(cpdomains[i], count);
        }
        
        for (Map.Entry<String, Integer> entry : count.entrySet()) {
            StringBuilder sb = new StringBuilder();
            sb.append(String.valueOf(entry.getValue())).append(" ").append(entry.getKey());
            ans.add(sb.toString());
        }
        
        return ans;
    }
    
    private void countDomains(String s, Map<String, Integer> map) {
        int count = 0;
        int index = 0;
        
        while (Character.isDigit(s.charAt(index))) {
            count = count * 10 + (s.charAt(index++) - '0');
        }
        
        index++; // skip the white space
        String curSubString = s.substring(index);
        map.put(curSubString, map.getOrDefault(curSubString, 0) + count);
        
        while (index < s.length()) {
            char c = s.charAt(index++);
            
            if (c == '.') {
                String substring = s.substring(index);
                map.put(substring, map.getOrDefault(substring, 0) + count);
            }
        }
    }
}
