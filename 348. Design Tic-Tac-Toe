# Oh wait I got it.

class TicTacToe {
    int[] Row;
    int[] Col;
    int diagonal;
    int ano_diagonal;
    int win;
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        Row = new int[n];
        Col = new int[n];
        diagonal = 0;
        ano_diagonal = 0;
        win = n;
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        //1 Update changes in row.
        if (player == 1){
            Row[row]++;
            if (Row[row] == win)
                return player;
        }
        else{
            Row[row]--;
            if (Row[row] == -1 * win)
                return player;
        }
        
        //2 Update changes in column.
        if (player == 1){
            Col[col]++;
            if (Col[col] == win)
                return player;
        }
        else{
            Col[col]--;
            if (Col[col] == -1 * win)
                return player;
        }
        
        //3 Update changes in diagonal.
        if (row == col && player == 1){
            diagonal++;
            if (diagonal == win)
                return player;
        }
        else if (row == col && player == 2){
            diagonal--;
            if (diagonal == -1 * win)
                return player;
        }
        
        //4 Update changes in another diagonal.
        if (row + col == win - 1 && player == 1){
            ano_diagonal++;
            if (ano_diagonal == win)
                return player;
        }
        else if (row + col == win - 1 && player == 2){
            ano_diagonal--;
            if (ano_diagonal == -1 * win)
                return player;
        }
        
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
--------------------------------------------------------------------------------------------------------------------------------
# Can't figure out a better way for that... Only think of brute force solution.

class TicTacToe {
    int[][] map;
    
    public TicTacToe(int n) {
        map = new int[n][n];
    }
    
    public int move(int row, int col, int player) {
        map[row][col] = player;
        
        //1: Search the row.
        for (int i = 0; i < map.length; i++){
            boolean win = true;
            for (int j = 0; j < map.length; j++){
                if (map[i][j] != player){
                    win = false;
                    break;
                }
            }
            if (win)
                return player;
        }
        //2: Search the column.
        for (int i = 0; i < map.length; i++){
            boolean win = true;
            for (int j = 0; j < map.length; j++){
                if (map[j][i] != player){
                    win = false;
                    break;
                }
            }
            if (win)
                return player;
        }
        //3: Search first diagonal.
        boolean tmp = true;
        for (int i = 0; i < map.length; i++){
            if (map[i][i] != player){
                tmp = false;
                break;
            }
        }
        if (tmp)
            return player;
        //4: Search second diagonal.
        tmp = true;
        for (int i = 0; i < map.length; i++){
            if (map[map.length - 1 - i][i] != player){
                tmp = false;
                break;
            }
        }
        if (tmp)
            return player;

        return 0;
    }
}
