/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    // Method 1: use a queue to perform BFS. O(n) space complexity.
    /*public Node connect(Node root) {
        if (root == null) {
            return root;
        }
        
        Queue<Node> level = new LinkedList<>();
        level.add(root);
        
        while (!level.isEmpty()) {
            int len = level.size();
            for (int i = 0; i < len - 1; i++) {
                Node node = level.remove();
                if (node.left != null) {
                    level.add(node.left);
                }
                if (node.right != null) {
                    level.add(node.right);
                }
                
                node.next = level.peek();
            }
            
            Node node = level.remove();
            if (node.left != null) {
                level.add(node.left);
            }
            if (node.right != null) {
                level.add(node.right);
            }
        }
        
        return root;
    }*/
    
    // Method 2: several pointers. O(1) space complexity.
    public Node connect(Node root) {
        if (root == null) {
            return root;
        }
        
        Node curr = root;
        Node head = null;
        Node prev = null;
        
        while (curr != null) {
            // Start connecting.
            while (curr != null) {
                
                // Handling left child.
                if (curr.left != null) {
                    if (prev != null) {
                        prev.next = curr.left;
                    } else {
                        head = curr.left;
                    }
                    prev = curr.left;
                }
                
                // Handling right child.
                if (curr.right != null) {
                    if (prev != null) {
                        prev.next = curr.right;
                    } else {
                        head = curr.right;
                    }
                    prev = curr.right;
                }
                
                // Move to next siblings.
                curr = curr.next;
            }
            
            // Jump to next level.
            curr = head;
            head = null;
            prev = null;
        }
        
        return root;
    }
}
