/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// Method 1. My method, complex but recursively fast!
class Solution {
    int larger, smaller, exact;
    
    public int closestValue(TreeNode root, double target) {
        larger = smaller = exact = root.val;
        findBounds(root, target);
        
        if (exact - target == 0) {
            return exact;
        } else {
            return Math.abs(larger - target) < Math.abs(smaller - target) ? larger : smaller;
        }
    }
    
    private void findBounds(TreeNode node, double target) {
        if (node == null) {
            return;
        }
        
        if (node.val == target) {
            exact = node.val;
            return;
        } else if (node.val < target) {
            smaller = node.val;
            findBounds(node.right, target);
        } else {
            larger = node.val;
            findBounds(node.left, target);;
        }
    }
}

// Method 2: recursive method, yet the lines are less than the previous one.
class Solution {
    public int closestValue(TreeNode root, double target) {
        TreeNode node = (root.val < target ? root.right : root.left);
        if (node == null) {
            return root.val;
        }
        int larger = closestValue(node, target);
        return (Math.abs(root.val - target) < Math.abs(larger - target) ? root.val : larger);
    }
}

// Method 3: iteration
class Solution {
    public int closestValue(TreeNode root, double target) {
        TreeNode node = root;
        int ans = node.val;
        
        while (node != null) {
            if (Math.abs(node.val - target) < Math.abs(ans - target)) {
                ans = node.val;
            }
            
            node = (node.val < target ? node.right : node.left);
        }
        
        return ans;
    }
}
