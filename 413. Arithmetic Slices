# 逐位遍历，并用head和tail两个参数来保存最大的arithmetic序列，再利用数学性质求组合数。

# 代码如下：

class Solution {
    public static int numberOfArithmeticSlices(int[] A) {
        int res = 0;
        int idx = 0;                    //Traverse with "idx" index.
        int head = 0;
        int tail = 0;
        boolean flag = false;           //"flag" is always false until we find the first three elements.

        //Deal with the base case first.
        if (A.length < 3 || (A.length == 3 && A[idx + 1] - A[idx] != A[idx + 2] - A[idx + 1]))
            return 0;
        else if (A.length == 3 && A[idx + 1] - A[idx] == A[idx + 2] - A[idx + 1])
            return 1;

        while (idx <= A.length - 3){
            //If we find the first three basic element, then we should keep checking the elements behind them.
            //Case 1: When we have the first three elements that are arithmetic.
            if (A[idx + 1] - A[idx] == A[idx + 2] - A[idx + 1] && flag == false && idx + 2 != A.length - 1) {
                head = idx;            
                flag = true;
                idx++;
            }
            else if (A[idx + 1] - A[idx] == A[idx + 2] - A[idx + 1] && flag == false && idx + 2 == A.length - 1){
                res++;
                return res;
            }
            
            //Case 2: When we are checking the following numbers that are behind the first three elements.
            else if (A[idx + 1] - A[idx] == A[idx + 2] - A[idx + 1] && flag == true && idx + 2 != A.length - 1)
                idx++;
            else if (A[idx + 1] - A[idx] == A[idx + 2] - A[idx + 1] && flag == true && idx + 2 == A.length - 1){
                tail = idx + 2;
                res += countPossible(head, tail);
                return res;
            }
            
            //Case 3: When we find that the following elements aren't arithmetic anymore.
            else if (A[idx + 1] - A[idx] != A[idx + 2] - A[idx + 1] && flag == true){
                tail = idx + 1;
                flag = false;
                res += countPossible(head, tail);
                idx++;
            }
            else if (A[idx + 1] - A[idx] != A[idx + 2] - A[idx + 1] && flag == false)
                idx++;
        }

        return res;
    }
    public static int countPossible(int i, int j){
        int len = j - i + 1;
        return (len - 1) * (len - 2) / 2;
    }
}
