class Solution {
    public int findKthLargest(int[] nums, int k) {
        return quickSelect(nums, 0, nums.length - 1, k - 1);
    }

    private int quickSelect(int[] nums, int left, int right, int target) {
        if (left == right) {
            return nums[left];
        }
        int pivotIndex = findPivotIndex(nums, left, right);
        if (pivotIndex == target) {
            return nums[pivotIndex];
        } else if (pivotIndex > target) {
            return quickSelect(nums, left, pivotIndex - 1, target);
        } else {
            return quickSelect(nums, pivotIndex + 1, right, target);
        }
    }

    private int findPivotIndex(int[] nums, int left, int right) {
        // Use right-most element as pivot.
        int pivotIndex = left;
        for (int i = left; i < right; i++) {
            if (nums[i] > nums[right]) {
                swapPlace(nums, pivotIndex, i);
                pivotIndex++;
            }
        }
        swapPlace(nums, right, pivotIndex);
        return pivotIndex;
    }

    private void swapPlace(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
