class Solution {
    // Method 1: first sort them then return.    
    /*
    public int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return Integer.MIN_VALUE;
        }
        
        Arrays.sort(nums);
        
        return nums[nums.length - k];
    }*/
    
    // Method 2: quick select.
    public int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return Integer.MIN_VALUE;
        }
    
        return quickSelect(nums, 0, nums.length - 1, nums.length - k);
    }
    
    /**
     * This is a recursive function.
     * The final return is the element from "nums".
     */
    private int quickSelect(int[] nums, int left, int right, int k) {
        // Base case.
        if (left == right) {
            return nums[left];
        }
        
        int index = getPivotIndex(nums, left, right, left);
        
        if (index == k) {
            return nums[index];
        } else if (index < k) {
            return quickSelect(nums, index + 1, right, k);
        } else {
            return quickSelect(nums, left, index - 1, k);
        }
    }
    
    private int getPivotIndex(int[] nums, int left, int right, int pivotIndex) {
        int index = left;
        
        swap(nums, pivotIndex, right);
        
        for (int i = left; i < right; i++) {
            if (nums[i] < nums[right]) {
                swap(nums, i, index++);
            }
        }
        
        swap(nums, index, right);
        
        return index;
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
