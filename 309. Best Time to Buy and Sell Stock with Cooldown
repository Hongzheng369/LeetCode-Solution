class Solution {
    // Problem about state.
    // s1: the state when buy, comes from s0 or s1 itself(stays in "purchased" state).
    // s2: the state when sell, comes only from s1.
    // s0: the state when cooldown, comes from s2 or s0 itself(keeps cooldown).
    public int maxProfit(int[] prices) {
        if (prices.length == 0) {
            return 0;
        }
        
        int s0 = 0, s0prev = 0;
        int s1 = 0, s1prev = -prices[0];
        int s2 = 0, s2prev = 0;
        
        for(int p : prices){
            s0 = Math.max(s0prev, s2prev);
            s1 = Math.max(s1prev, s0prev - p);
            s2 = s1prev + p;
            s0prev = s0;
            s1prev = s1;
            s2prev = s2;
        }
        
        return Math.max(s0, s2);
    }
}
