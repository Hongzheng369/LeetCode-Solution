/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder == null || preorder.length == 0) {
            return null;
        }
        return makeTree(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
    }
    
    private TreeNode makeTree(int[] preorder, int preHead, int preTail, int[] inorder, int inHead, int inTail) {
        if (preHead == preTail) {
            return new TreeNode(preorder[preHead]);
        } else if (preHead > preTail) {
            return null;
        }
        // Make root node.
        TreeNode root = new TreeNode(preorder[preHead]);
        int rootIndex = 0;
        while (inorder[rootIndex] != preorder[preHead]) {
            rootIndex++;
        }
        // Size of left tree: rootIndex - inHead;
        // Size of right tree: inTail - rootIndex;
        root.left = makeTree(preorder, preHead + 1, preHead + rootIndex - inHead, inorder, inHead, rootIndex - 1);
        root.right = makeTree(preorder, preHead + rootIndex - inHead + 1, preTail, inorder, rootIndex + 1, inTail);
        return root;
    }
}
