class Solution {
    // Method 1: dynamic programming.
    public int integerBreak(int n) {
        int[] prevResults = new int[n + 1];
        prevResults[1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= (i / 2); j++) {
                prevResults[i] = Math.max(prevResults[i], Math.max(j, prevResults[j]) * Math.max((i - j), prevResults[i - j]));
            }
        }
        
        return prevResults[n];
    }
    
    // Method 2: mathematical calculation.
    /*public int integerBreak(int n) {
        if (n < 3) {
            return 1;
        } else if (n == 3) {
            return 2;
        }
        
        if (n % 3 == 0) {
            return calculatePow(3, n / 3);
        } else if (n % 3 == 1) {
            return calculatePow(3, n / 3 - 1) * 4;
        } else {
            return calculatePow(3, n / 3) * 2;
        }
    }
    
    private int calculatePow(int base, int power) {
        int ans = 1;
        while (power > 0) {
            if ((power & 1) > 0) {
                ans *= base;
            }
            base *= base;
            power >>= 1;
        }
        
        return ans;
    }*/
}
