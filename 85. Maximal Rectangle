class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        
        int[] height = new int[matrix[0].length];
        int maxArea = 0;

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                height[j] = matrix[i][j] == '0' ? 0 : height[j] + 1;
            }
            maxArea = Math.max(maxArea, largestRectangleArea(height));
        }

        return maxArea;
    }

    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        Stack<Integer> index = new Stack<>();
        index.add(-1);

        for (int i = 0; i < heights.length; i++) {
            while (index.peek() != -1 && heights[index.peek()] >= heights[i]) {
                maxArea = Math.max(maxArea, heights[index.pop()] * (i - index.peek() - 1));
            }
            index.add(i);
        }

        if (index.peek() != -1) {
            maxArea = Math.max(maxArea, heights[index.pop()] * (heights.length - index.peek() - 1));
        }

        return maxArea;
    }
}
