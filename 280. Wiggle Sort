class Solution {
    // Method 1: O(nlogn), sort then swap.
    /*
    public void wiggleSort(int[] nums) {
        if (nums == null) {
            return;
        }
        int len = nums.length;
        if (len == 0) {
            return;
        }
        
        Arrays.sort(nums);
        
        for (int i = 1; i < len - 1; i += 2) {
            swap(nums, i, i + 1);
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }*/
    
    // Method 2: O(n), only one traverse.
    
    public void wiggleSort(int[] nums) {
        if (nums == null) {
            return;
        }
        int len = nums.length;
        if (len == 0) {
            return;
        }
        
        for (int i = 0; i < len - 1; i++) {
            if ((i % 2 == 0) == (nums[i] > nums[i + 1])) {
                swap(nums, i, i + 1);
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
