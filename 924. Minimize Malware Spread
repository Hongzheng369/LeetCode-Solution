class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int nodeNum = graph.length;
        int[] nodeColor = new int[nodeNum];
        int color = 1;
        for (int node = 0; node < nodeNum; node++) {
            if (nodeColor[node] == 0) {
                dfs(graph, nodeColor, node, color++, nodeNum);
            }
        }

        int[] sizeOfColors = new int[color];
        for (int i : nodeColor) {
            sizeOfColors[i]++;
        }

        Arrays.sort(initial);
        int maxAppearColor = nodeColor[initial[0]];
        HashMap<Integer, Integer> colorAndSmallestIndex = new HashMap<>();
        for (int i : initial) {
            if (!colorAndSmallestIndex.containsKey(nodeColor[i])) {
                colorAndSmallestIndex.put(nodeColor[i], i);
            }
            else {
                colorAndSmallestIndex.put(nodeColor[i], Math.min(i, colorAndSmallestIndex.get(nodeColor[i])));
            }
            if (sizeOfColors[nodeColor[i]] > sizeOfColors[maxAppearColor]) {
                maxAppearColor = nodeColor[i];
            }
        }
        
        return colorAndSmallestIndex.get(maxAppearColor);
    }

    private void dfs(int[][] graph, int[] nodeColor, int node, int color, int nodeNum) {
        nodeColor[node] = color;
        for (int neighbor = 0; neighbor < nodeNum; neighbor++) {
            if (graph[node][neighbor] == 1 && nodeColor[neighbor] == 0) {
                dfs(graph, nodeColor, neighbor, color, nodeNum);
            }
        }
    }
}
