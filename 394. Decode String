class Solution {
    public String decodeString(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }
        
        Stack<Integer> times = new Stack<>();
        Stack<StringBuilder> substring = new Stack<>();
        int count = 0;
        StringBuilder ans = new StringBuilder();
        
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            
            // If it's a number.
            if (ch >= '0' && ch <= '9') {
                count = 10 * count + (ch - '0');
            }
            
            // If it's a left parenthsis.
            else if (ch == '[') {
                times.push(count);
                substring.push(ans);
                
                // Empty these two containers.
                count = 0;
                ans = new StringBuilder();
            }
            
            // If it's a right parenthsis.
            else if (ch == ']') {
                int time = times.pop();
                for (int j = 0; j < time; j++) {
                    substring.peek().append(ans);
                }
                ans = substring.pop();
            }
            
            // If it's a character.
            else {
                ans.append(ch);
            }
        }
        
        return (substring.isEmpty() ? ans.toString() : substring.peek().toString());
    }
}
