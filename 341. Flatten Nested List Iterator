/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {

    // Use a deque to flatten this structure.
    Deque<NestedInteger> queue = new ArrayDeque<>();
    
    public NestedIterator(List<NestedInteger> nestedList) {
        for (int i = 0; i < nestedList.size(); i++) {
            queue.add(nestedList.get(i));
        }
    }

    @Override
    public Integer next() {
        return queue.remove().getInteger();
    }

    @Override
    public boolean hasNext() {
        // The loop will stop in two conditions:
        // 1. The queue is empty;
        // 2. The head of the queue is an Integer.
        while (!queue.isEmpty()) {
            // If it's an Integer.
            if (queue.peek().isInteger()) {
                return true;
            }
            
            // If it's a List.
            List<NestedInteger> list = queue.remove().getList();
            for (int i = list.size() - 1; i >= 0; i--) {
                queue.addFirst(list.get(i));
            }
        }
        
        return false;
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
