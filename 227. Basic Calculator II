class Solution {
    public int calculate(String s) {
        //return method1(s);
        return method2(s);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method 1: standard method for calculating an expression in string with stack.
     */
    private int method1(String s) {
        Stack<Integer> stack = new Stack<>();
        int num = 0, len = s.length();
        char sign = '+';
        
        for (int i = 0; i < len; i++) {
            char c = s.charAt(i);
            
            if (Character.isDigit(c)) {
                num = num * 10 + (c - '0');
            }
            
            if (!Character.isDigit(c) && c != ' ' || i == len - 1) {
                if (sign == '+') {
                    stack.push(num);
                } else if (sign == '-') {
                    stack.push(-num);
                } else if (sign == '*') {
                    stack.push(stack.pop() * num);
                } else {
                    stack.push(stack.pop() / num);
                }

                num = 0;
                sign = c;
            }
        }
        
        while (!stack.isEmpty()) {
            num += stack.pop();
        }
        
        return num;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method 2: without stack.
     */
    private int method2(String s) {
        int num = 0, len = s.length(), lastNum = 0, res = 0;
        char sign = '+';
        
        for (int i = 0; i <= len; i++) {
            if (i < len && Character.isDigit(s.charAt(i))) {
                num = num * 10 + (s.charAt(i) - '0');
            } else {
                if (i < len && s.charAt(i) == ' ') {
                    continue;
                }
                
                if (sign == '+') {
                    res += num;
                    lastNum = num;
                } else if (sign == '-') {
                    res -= num;
                    lastNum = -num;
                } else if (sign == '*') {
                    res = (res - lastNum) + lastNum * num;
                    lastNum *= num;
                } else {
                    res = (res - lastNum) + lastNum / num;
                    lastNum /= num;
                }
                
                num = 0;
                if (i < len) {
                    sign = s.charAt(i);
                }
            }
        }
        
        return res;
    }
}
