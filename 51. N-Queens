class Solution {
    public static List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        if (n <= 0){
            return res;
        }
        int[] palce = new int[n];
        helperQueen(res, 0, palce);
        return res;
    }
    public static void helperQueen(List<List<String>> res, int row, int[] place){
        // Adding queen in row-th row.
        if (row < place.length){
            for (int i = 0; i < place.length; i++){
                place[row] = i;
                if (isValid(row, place)){
                    helperQueen(res, row + 1, place);
                }
            }
        }
        // Adding finished.
        else {
            List<String> ans = new ArrayList<>();
            for (int i = 0; i < place.length; i++){
                StringBuilder s = new StringBuilder();
                for (int j = 0; j < place.length; j++){
                    if (j != place[i]){
                        s.append('.');
                    }
                    else {
                        s.append('Q');
                    }
                }
                ans.add(s.toString());
            }
            res.add(ans);
        }
    }
    // Compare row-th row to previous rows to see if it's valid.
    public static boolean isValid(int row, int[] place){
        for (int i = 0; i < row; i++){
            if (place[i] == place[row] || Math.abs(place[row] - place[i]) == row - i){
                return false;
            }
        }
        return true;
    }
}
