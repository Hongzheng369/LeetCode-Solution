# 1. My solution, using O(n + m) space:

class Solution {
    public static void setZeroes(int[][] matrix) {
		if (matrix == null || matrix.length == 0) {
			return;
		}
        boolean[] rowTurnZero = new boolean[matrix.length];
        boolean[] columnTurnZero = new boolean[matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
        	for (int j = 0; j < matrix[0].length; j++) {
        		if (matrix[i][j] == 0) {
        			rowTurnZero[i] = true;
        			columnTurnZero[j] = true;
        		}
        	}
        }
        for (int i = 0; i < rowTurnZero.length; i++) {
        	if (rowTurnZero[i] == true) {
        		for(int j = 0; j < matrix[i].length; j++) {
        			matrix[i][j] = 0;
        		}
        	}
        }
        for (int i = 0; i < columnTurnZero.length; i++) {
        	if (columnTurnZero[i] == true) {
        		for(int j = 0; j < matrix.length; j++) {
        			matrix[j][i] = 0;
        		}
        	}
        }
	}
}

---------------------------------------------------------------

# 2. Better solution, using only O(1) space:

class Solution {
    public static void setZeroes(int[][] matrix) {
		if (matrix == null || matrix.length == 0) {
			return;
		}
		boolean leftColumn = false;
        for (int i = 0; i < matrix.length; i++) {
        	if (matrix[i][0] == 0) {
        		leftColumn = true;
        	}
        	for (int j = 1; j < matrix[0].length; j++) {
        		if (matrix[i][j] == 0) {
        			matrix[i][0] = 0;
        			matrix[0][j] = 0;
        		}
        	}
        }
        for (int i = 1; i < matrix.length; i++) {
        	for (int j = 1; j < matrix[0].length; j++) {
        		if (matrix[i][0] == 0 || matrix[0][j] == 0) {
        			matrix[i][j] = 0;
        		}
        	}
        }
        // We must handle row first here.
        if (matrix[0][0] == 0) {
        	for (int j = 0; j < matrix[0].length; j++) {
        		matrix[0][j] = 0;
        	}
        }
        // Then we can handle column.
        if (leftColumn) {
        	for (int i = 0; i < matrix.length; i++) {
        		matrix[i][0] = 0;
        	}
        }
	}
}
