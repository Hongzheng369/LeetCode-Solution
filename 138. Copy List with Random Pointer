/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
    HashMap<Node, Node> copied = new HashMap<>();
    
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        
        Node oldNode = head;
        Node newNode = new Node(head.val, null, null);
        Node ans = newNode;
        copied.put(oldNode, newNode);
        
        while (oldNode != null) {
            newNode.next = getNode(oldNode.next);
            newNode.random = getNode(oldNode.random);
            
            oldNode = oldNode.next;
            newNode = newNode.next;
        }
        
        return ans;
    }
    
    private Node getNode(Node node) {
        if (node == null) {
            return null;
        } else {
            if (copied.containsKey(node)) {
                return copied.get(node);
            } else {
                Node temp = new Node(node.val, null, null);
                copied.put(node, temp);
                return temp;
            }
        }
    }
}
