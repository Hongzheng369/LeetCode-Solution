class Solution {
    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Let nums1 be the shorter length array.
        int m = nums1.length, n = nums2.length;
        if (m > n){
            int[] tempArray = nums1; nums1 = nums2; nums2 = tempArray;
            int tempLen = m; m = n; n = tempLen;
        }
        int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;
        // Now separate these two arrays into two parts.
        while (iMin <= iMax){
            // i stands for i elements from nums1, j stands for ~ from nums2.
            int i = (iMin + iMax) / 2, j = halfLen - i;
            // When i is too small.
            if (i < iMax && nums1[i] < nums2[j - 1])
                iMin = i + 1;
            // When i is too large.
            else if (i > iMin && nums1[i - 1] > nums2[j])
                iMax = i - 1;
            // When i is perfect.
            else {
                int leftMax = 0;
                if (i == 0)
                    leftMax = nums2[j - 1];
                else if (j == 0)
                    leftMax = nums1[i - 1];
                else
                    leftMax = Math.max(nums2[j - 1], nums1[i - 1]);
                // Now if m + n is an odd number, then we can just return leftMax as the answer right here.
                if ((m + n) % 2 == 1)
                    return leftMax;
                int rightMin = 0;
                if (i == m)
                    rightMin = nums2[j];
                else if (j == n)
                    rightMin = nums1[i];
                else
                    rightMin = Math.min(nums2[j], nums1[i]);
                return (double)(leftMax + rightMin) / (double)(2);
            }
        }
        return 0.0;
    }
}
