class Solution {
    /* 2D dynamic programming.
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        int row = matrix.length;
        int col = matrix[0].length;
        int maxLen = 0;
        int[][] dp = new int[row + 1][col + 1];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (matrix[i][j] == '1') {
                    dp[i + 1][j + 1] = Math.min(dp[i][j], Math.min(dp[i + 1][j], dp[i][j + 1])) + 1;
                    maxLen = Math.max(maxLen, dp[i + 1][j + 1]);
                }
            }
        }
        return maxLen * maxLen;
    }*/
    
    // 1D dynamic programming.
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        int row = matrix.length;
        int col = matrix[0].length;
        int maxLen = 0;
        int prev = 0;
        int[] dp = new int[col + 1];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                int temp = dp[j + 1];
                if (matrix[i][j] == '1') {
                    dp[j + 1] = Math.min(prev, Math.min(dp[j], dp[j + 1])) + 1;
                    maxLen = Math.max(maxLen, dp[j + 1]);
                } else {
                    dp[j + 1] = 0;
                }
                prev = temp;
            }
        }
        return maxLen * maxLen;
    }
}
