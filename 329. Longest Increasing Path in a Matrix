/**     My method.      */
class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        
        int maxLen = 0;
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] result = new int[rows][cols];
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                dfs(matrix, i, j, result, rows, cols);
                maxLen = Math.max(maxLen, result[i][j]);
            }
        }
        
        return maxLen;
    }
    
    private void dfs(int[][] matrix, int i, int j, int[][] result, int rows, int cols) {
        if (result[i][j] != 0) {
            return;
        }
        
        // Go up.
        if (i > 0 && matrix[i - 1][j] < matrix[i][j]) {
            dfs(matrix, i - 1, j, result, rows, cols);
            result[i][j] = Math.max(result[i][j], 1 + result[i - 1][j]);
        }
        // Go down.
        if (i < rows - 1 && matrix[i + 1][j] < matrix[i][j]) {
            dfs(matrix, i + 1, j, result, rows, cols);
            result[i][j] = Math.max(result[i][j], 1 + result[i + 1][j]);
        }
        // Go left.
        if (j > 0 && matrix[i][j - 1] < matrix[i][j]) {
            dfs(matrix, i, j - 1, result, rows, cols);
            result[i][j] = Math.max(result[i][j], 1 + result[i][j - 1]);
        }
        // Go right.
        if (j < cols - 1 && matrix[i][j + 1] < matrix[i][j]) {
            dfs(matrix, i, j + 1, result, rows, cols);
            result[i][j] = Math.max(result[i][j], 1 + result[i][j + 1]);
        }
        
        // If this spot has nowhere to go:
        if (result[i][j] == 0) {
            result[i][j] = 1;
        }
    }
}


/**         Faster and shoter one with the same idea.     */
class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        
        int maxLen = 0, rows = matrix.length, cols = matrix[0].length;
        int[][] result = new int[rows][cols], direction = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                maxLen = Math.max(maxLen, dfs(matrix, i, j, result, rows, cols, direction));
            }
        }
        
        return maxLen;
    }
    
    private int dfs(int[][] matrix, int i, int j, int[][] result, int rows, int cols, int[][] direction) {
        if (result[i][j] != 0) {
            return result[i][j];
        }
        
        for (int[] direct : direction) {
            int x = i + direct[0], y = j + direct[1];
            if (x > -1 && x < rows && y > -1 && y < cols && matrix[x][y] > matrix[i][j]) {
                result[i][j] = Math.max(result[i][j], dfs(matrix, x, y, result, rows, cols, direction));
            }
        }
        
        result[i][j]++;
        return result[i][j];
    }
}
