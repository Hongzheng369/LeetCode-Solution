class Solution {
    // Method 1: get each level.
    /*
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        
        List<String> levels = getList(num1, num2);
        
        String result = levels.get(0);
        
        for (int i = 1; i < levels.size(); i++) {
            result = getSum(result.toCharArray(), levels.get(i).toCharArray());
        }
        
        return result;
    }
    
    private List<String> getList(String s1, String s2) {
        char[] arrLong = (s1.length() > s2.length() ? s1.toCharArray() : s2.toCharArray());
        char[] arrShort = (s1.length() > s2.length() ? s2.toCharArray() : s1.toCharArray());
        int maxIndex = arrShort.length - 1;
        
        List<String> result = new ArrayList<>();
        
        for (int index = maxIndex; index > -1; index--) {
            result.add(multipleWithChar(arrLong, arrShort[index], maxIndex - index));
        }
        
        return result;
    }
    
    private String getSum(char[] s1, char[] s2) {
        StringBuilder result = new StringBuilder();
        int idx1 = s1.length - 1;
        int idx2 = s2.length - 1;
        int plus = 0;
        
        while (idx1 > -1 || idx2 > -1) {
            int num = (idx1 > -1 ? (s1[idx1--] - '0') : 0) + (idx2 > -1 ? (s2[idx2--] - '0') : 0) + plus;
            result.append(num % 10);
            plus = num / 10;
        }
        
        if (plus != 0) {
            result.append(plus);
        }
        
        return result.reverse().toString();
    }
    
    private String multipleWithChar(char[] s, char c, int level) {
        StringBuilder result = new StringBuilder();
        
        for (int i = 0; i < level; i++) {
            result.append(0);
        }
        
        int plus = 0;
        
        for (int i = s.length - 1; i > -1; i--) {
            int num = (s[i] - '0') * (c - '0') + plus;
            result.append(num % 10);
            plus = num / 10;
        }
        
        if (plus != 0) {
            result.append(plus);
        }
        
        return result.reverse().toString();
    }*/
    
    // Method 2: just save the numbers first, then handle what should add to next index.
    // m-digits * n-digits <= (m + n)digits.
    public String multiply(String num1, String num2) {
        if (num1 == null || num2 == null || num1.length() == 0 || num2.length() == 0) {
            return "0";
        }
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        
        int carry = 0;
        char[] c1 = num1.toCharArray();
        char[] c2 = num2.toCharArray();
        int len1 = c1.length;
        int len2 = c2.length;
        int [] res = new int[len1 + len2];
        StringBuilder sb = new StringBuilder();
        
        for (int i = len1 - 1; i > -1; i--) {
            for (int j = len2 - 1; j > -1; j--)  {
                res[i + j + 1] += (c1[i] - '0') * (c2[j] - '0');
            }
        }
        
        for (int i = len1 + len2 - 1; i > -1; i--) {
            res[i] += carry;
            carry = res[i] / 10;
            res[i] %= 10;
        }
        
        int i = 0;
        while (i < len1 + len2) {
            if (res[i] == 0) {
                i++;
            }
            else {
                break;
            }
        }
        for(; i < len1 + len2; i++) {
            sb.append(res[i]);
        }
        
        return sb.toString();
    }
}
