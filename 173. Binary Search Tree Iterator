/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    Stack<TreeNode> stack;
    TreeNode save;
    
    public BSTIterator(TreeNode root) {
        stack = new Stack<>();
        save = root;
        while(save != null){
            stack.push(save);
            save = save.left;
        }
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        //1. Base case: stack is empty
        if (stack.isEmpty())
            return false;
        save = stack.pop();
        if (save.right != null){
            TreeNode tmp = save.right;
            while (tmp != null){
                stack.push(tmp);
                tmp = tmp.left;
            }
        }
        if (!stack.isEmpty() || save != null)
            return true;
        return false;
    }
    
    /** @return the next smallest number */
    public int next() {
        return save.val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
