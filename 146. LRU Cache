# My solution. It's not a very good idea because both of the function can't run in O(1) time complexity.
# To find the number I want to update is a pretty tricky thing to do.
# 往下翻!!! 双向链表get!!!!
# 还有一个神奇的数据结构叫做LinkedHashMap!!! *mind blown*

class LRUCache {
    static Map<Integer, Integer> map;
    static List<Integer> list;
    static int size;

    public LRUCache(int capacity) {
        map = new HashMap<>();
        list = new ArrayList<>();
        size = capacity;
    }

    public static int get(int key) {
        if (!map.containsKey(key)){
            return -1;
        }
        // Since it has been checked, then it should not be the least used anymore.
        list.remove(new Integer(key));
        list.add(key);
        return map.get(key);
    }

    public static void put(int key, int value) {
        // If I already have this key:
        if (map.containsKey(key)){
            map.put(key, value);
            list.remove(new Integer(key));
            list.add(key);
        }
        // If I don't have this key:
        else {
            // If I still don't reach the capacity:
            if (map.size() < size){
                map.put(key, value);
                list.add(key);
            }
            else {
                map.remove(list.remove(0));
                map.put(key, value);
                list.add(key);
            }
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
 
 ---------------------------------------------------------------------------------

# 前方高能
# 仔细品味, 看完之后你的大脑会刷新三观.

class LRUCache {
    
    DoubleNode head;
    DoubleNode tail;
    HashMap<Integer, DoubleNode> map;
    int size;
    int capacity;
    
    public LRUCache(int capacity) {
        head = new DoubleNode();
        tail = new DoubleNode();
        head.next = tail;
        tail.prev = head;
        
        map = new HashMap<>();
        size = 0;
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if (!map.containsKey(key)) {
            return -1;
        }
        
        DoubleNode node = map.get(key);
        removeNode(node);
        addNodeToHead(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            DoubleNode node = map.get(key);
            node.val = value;
            removeNode(node);
            addNodeToHead(node);
            return;
        }
        
        DoubleNode node = new DoubleNode(key, value);
        map.put(key, node);
        addNodeToHead(node);
        size++;
        
        if (size > capacity) {
            node = removeTail();
            map.remove(node.key);
            size--;
        }
    }
    
    // Additional data structures.
    private class DoubleNode {
        int key;
        int val;
        DoubleNode prev;
        DoubleNode next;
        
        DoubleNode() {
            
        }
        
        DoubleNode(int key, int val) {
            this.key = key;
            this.val = val;
        }
    }
    
    // Add a node at the start of the double linked list.
    private void addNodeToHead(DoubleNode node) {
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
        node.prev = head;
    }
    
    // Remove a node from the double linked list.
    private void removeNode(DoubleNode node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    // Remove a node from the tail and return it.
    private DoubleNode removeTail() {
        DoubleNode node = tail.prev;
        removeNode(node);
        return node;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
