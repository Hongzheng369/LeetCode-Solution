/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if (intervals == null || intervals.size() == 0) {
            return intervals;
        }
        
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval o1, Interval o2) {
                return o1.start - o2.start;
            }
        });
        
        LinkedList<Interval> ans = new LinkedList<>();
        for (Interval interval : intervals) {
            if (ans.isEmpty() || ans.getLast().end < interval.start) {
                ans.add(interval);
            }
            else {
                ans.getLast().end = Math.max(ans.getLast().end, interval.end);
            }
        }
        
        return ans;
    }
}
