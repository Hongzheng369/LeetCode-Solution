class Solution {
    // Method 1: dynamic programming.
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];
            }
        });
        
        int len = pairs.length;
        int[] maxLen = new int[len];
        Arrays.fill(maxLen, 1);
        int ans = 1;
        
        for (int i = 1; i < len; i++) {
            for (int j = 0; j < i; j++) {
                if (pairs[j][1] < pairs[i][0]) {
                    maxLen[i] = Math.max(maxLen[i], maxLen[j] + 1);
                }
            }
            ans = Math.max(ans, maxLen[i]);
        }
        
        return ans;
    }
    
    // Method 2: Greedy.
    /*public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return a[1] - b[1];
            }
        });
        
        int ans = 0;
        int currEnd = Integer.MIN_VALUE;
        for (int[] pair : pairs) {
            if (currEnd < pair[0]) {
                currEnd = pair[1];
                ans++;
            }
        }
        
        return ans;
    }*/
}
