class Solution {
    // Method 1: O(n) operation.
    /*public int findMin(int[] nums) {
        int min = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < min) {
                return nums[i];
            }
        }
        return min;
    }*/
    
    // Method 2: O(logn) operation, because this is binary search.
    /*public int findMin(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }
        
        int left = 0, right = nums.length - 1;
        if (nums[right] > nums[0]) {
            return nums[0];
        }
        
        while (right >= left) {
            int mid = left + (right - left) / 2;

            if (nums[mid] > nums[mid + 1]) {
                return nums[mid + 1];
            }
            if (nums[mid - 1] > nums[mid]) {
                return nums[mid];
            }

            if (nums[mid] > nums[0]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;
    }*/
    
    // Method 3: binary search in recursion.
    public int findMin(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }
        
        int left = 0, right = nums.length - 1;
        if (nums[right] > nums[0]) {
            return nums[0];
        }
        
        return findIndex(left, right, nums);
    }
    
    private int findIndex(int left, int right, int[] nums) {
        if (left > right) {
            return -1;
        }
        
        int mid = left + (right - left) / 2;
        if (nums[mid] > nums[mid + 1]) {
            return nums[mid + 1];
        }
        if (nums[mid - 1] > nums[mid]) {
            return nums[mid];
        }

        if (nums[mid] > nums[0]) {
            return findIndex(mid + 1, right, nums);
        } else {
            return findIndex(left, mid - 1, nums);
        }
    }
}
