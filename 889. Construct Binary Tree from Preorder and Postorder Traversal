# 思路：Divide and conquer分治法。preOrder序列是“父-左-右”，postOrder序列是“左-右-父”。
# 按此规律分割序列，先得到祖先节点；然后在分开的两个序列里执行相同操作，分别找到左子树、右子树的祖先节点，再得到它们各自的左子树、右子树。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int preIndex = 0;           //preIndex is saved as a "static" variable.
    
    public TreeNode constructFromPrePost(int[] pre, int[] post){
        return buildTree(pre, post, 0, post.length - 1);
    }

    public TreeNode buildTree(int[] pre, int[] post, int head, int tail){
        if(head > tail) 
            return null;        //If head > tail, then that means no element in here.
        
        TreeNode root = new TreeNode(post[tail]);
        preIndex += 1;          //Send out a node, preIndex += 1.
        
        if(head == tail) 
            return root;        //"head = tail" means there is only one element, we can return it.
        int i = head;           //Otherwise, do these procedures to seperate left subtree and right subtree.
        while(i <= tail && post[i] != pre[preIndex])
            i++;
    
        root.left = buildTree(pre, post, head, i);
        root.right = buildTree(pre, post, i + 1, tail - 1);
        return root;
    }
}
