/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    // Method 1: BFS with TreeMap.
    // TIL TreeMap is a sorted-key map, and it doesn't allow duplicate keys.
    /*public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        
        TreeMap<Integer, List<Integer>> map = new TreeMap<>();
        Queue<TreeNode> level = new LinkedList<>();
        Queue<Integer> degree = new LinkedList<>();
        level.add(root);
        degree.add(0);
        
        while (!level.isEmpty()) {
            TreeNode node = level.remove();
            int order = degree.remove();
            
            List<Integer> list = map.get(order);
            if (list == null) {
                list = new ArrayList<>();
                map.put(order, list);
            }
            list.add(node.val);
            
            if (node.left != null) {
                level.offer(node.left);
                degree.offer(order - 1);
            }
            if (node.right != null) {
                level.offer(node.right);
                degree.offer(order + 1);
            }
        }
        
        ans.addAll(map.values());
        return ans;
    }*/
    
    // Method 2: BFS, with an array saving the vertical "distance" to the root.
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        
        int[] mm = new int[2];
        getMinMax(root, mm, 0);
        
        int len = mm[1] - mm[0] + 1;
        for(int i = 0; i < len; i++){
            ans.add(new ArrayList<Integer>());
        }
 
        Queue<TreeNode> level = new LinkedList<>();
        Queue<Integer> degree = new LinkedList<>();
        level.add(root);
        degree.add(0);
 
        while (!level.isEmpty()) {
            TreeNode node = level.poll();
            int order = degree.poll();
            ans.get(order - mm[0]).add(node.val);

            if (node.left != null) {
                level.offer(node.left);
                degree.offer(order - 1);
            }
            if (node.right != null) {
                level.offer(node.right);
                degree.offer(order + 1);
            }
        }

        return ans;
    }
    
    private void getMinMax(TreeNode node, int[] mm, int order) {
        if (node == null) {
            return;
        }
        
        mm[0] = Math.min(mm[0], order);
        mm[1] = Math.max(mm[1], order);
        
        getMinMax(node.left, mm, order - 1);
        getMinMax(node.right, mm, order + 1);
    }
}
