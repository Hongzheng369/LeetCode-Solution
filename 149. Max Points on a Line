class Solution {
    public int maxPoints(int[][] points) {
        int result = 0;
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        
        for (int i = 0; i < points.length; i++) {
            int overlap = 0;
            int max = 0;
            
            for (int j = i + 1; j < points.length; j++) {
                int x = points[j][0] - points[i][0];
                int y = points[j][1] - points[i][1];
                
                if (x == 0 && y == 0) {
                    overlap++;
                    continue;
                }
                
                int gcd = getGCD(x, y);
                if (gcd != 0) {
                    x /= gcd;
                    y /= gcd;
                }
                
                if (map.containsKey(x)) {
                    Map<Integer, Integer> temp = map.get(x);
                    temp.put(y, temp.getOrDefault(y, 0) + 1);
                } else {
                    Map<Integer, Integer> temp = new HashMap<>();
                    temp.put(y, 1);
                    map.put(x, temp);
                }
                
                max = Math.max(max, map.get(x).get(y));  
            }
            
            result = Math.max(result, max + overlap + 1);
            map.clear();
        }
        
        return result;
    }
    
    private int getGCD(int a, int b) {
        if (b == 0) {
            return a;
        }
        
        return getGCD(b, a % b);
    }
}
