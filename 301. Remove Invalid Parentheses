class Solution {
    Set<String> save = new HashSet<>();

    public List<String> removeInvalidParentheses(String s) {
        int leftParen = 0;
        int rightParen = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                leftParen++;
            } else if (s.charAt(i) == ')') {
                rightParen = leftParen == 0 ? rightParen + 1 : rightParen;
                leftParen = leftParen > 0 ? leftParen - 1 : leftParen;
            }
        }
        helpRemove(s, 0, 0, leftParen, 0, rightParen, new StringBuilder());
        return new ArrayList<>(save);
    }

    private void helpRemove(String s, int index, int leftCount, int leftToRemove, int rightCount, int rightToRemove, StringBuilder temp) {
        if (index == s.length()) {
            if (leftToRemove == 0 && rightToRemove == 0) {
                save.add(temp.toString());
            }
        } else {
            char c = s.charAt(index);
            // Delete this character.
            if (c == '(' && leftToRemove > 0) {
                helpRemove(s, index + 1, leftCount, leftToRemove - 1, rightCount, rightToRemove, temp);
            } else if (c == ')' && rightToRemove > 0) {
                helpRemove(s, index + 1, leftCount, leftToRemove, rightCount, rightToRemove - 1, temp);
            }
            // Append this character.
            temp.append(c);
            if (c != '(' && c != ')') {
                helpRemove(s, index + 1, leftCount, leftToRemove, rightCount, rightToRemove, temp);
            } else if (c == '(') {
                helpRemove(s, index + 1, leftCount + 1, leftToRemove, rightCount, rightToRemove, temp);
            } else if (rightCount < leftCount) {
                helpRemove(s, index + 1, leftCount, leftToRemove, rightCount + 1, rightToRemove, temp);
            }
            temp.deleteCharAt(temp.length() - 1);
        }
    }
}
