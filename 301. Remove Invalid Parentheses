class Solution {
    
    Set<String> save = new HashSet<>();
    
    public List<String> removeInvalidParentheses(String s) {
        int left = 0, right = 0;
        
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
            }
            else if (s.charAt(i) == ')') {
                right = (left == 0 ? right + 1 : right);
                left = (left > 0 ? left - 1 : left);
            }
        }
        
        helper(s, 0, 0, 0, left, right, new StringBuilder());
        return new ArrayList<String>(save);
    }
    
    public void helper(String s, int idx, int leftCount, int rightCount, int leftRemove, int rightRemove, StringBuilder ans) {
        if (idx == s.length()) {
            if (leftRemove == 0 && rightRemove == 0) {
                save.add(ans.toString());
            }
        }
        
        else {
            char c = s.charAt(idx);
            int len = ans.length();
            
            // 1. Delete this character.
            if ((c == '(' && leftRemove > 0) || (c == ')' && rightRemove > 0)) {
                helper(s, idx + 1, leftCount, rightCount, 
                    leftRemove - (c == '(' ? 1 : 0),
                    rightRemove - (c == ')' ? 1 : 0),
                    ans
                );
            }
            
            // 2. Save this character.
            ans.append(c);
            
            // 2.1 If it's a english character.
            if (c != '(' && c != ')') {
                helper(s, idx + 1, leftCount, rightCount, leftRemove, rightRemove, ans);
            }
            // 2.2 If it's a left parenthesis.
            else if (c == '(') {
                helper(s, idx + 1, leftCount + 1, rightCount, leftRemove, rightRemove, ans);
            }
            // 2.3 If it's a right parenthesis.
            else if (rightCount < leftCount) {
                helper(s, idx + 1, leftCount, rightCount + 1, leftRemove, rightRemove, ans);
            }
            
            ans.deleteCharAt(len);
        }
    }
}
