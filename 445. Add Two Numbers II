/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null && l2 == null) {
            return null;
        } else if (l1 == null) {
            return l2;
        } else if (l2 == null) {
            return l1;
        }
        
        HashMap<ListNode, ListNode> map1 = new HashMap<>(), map2 = new HashMap<>();
        ListNode node1 = l1, node2 = l2;
        int len1 = 1, len2 = 1;
        
        while (node1.next != null) {
            map1.put(node1.next, node1);
            len1++;
            node1 = node1.next;
        }
        while (node2.next != null) {
            map2.put(node2.next, node2);
            len2++;
            node2 = node2.next;
        }
        
        int carry = 0;
        ListNode prev = null;
        while (len1 > 0 || len2 > 0) {
            int sum = (len1 > 0 ? node1.val : 0) + (len2 > 0 ? node2.val : 0) + carry;
            carry = sum / 10;
            ListNode node = new ListNode(sum - 10 * carry);
            
            node.next = prev;
            prev = node;
            
            len1--;
            len2--;
            if (len1 > 0) {
                node1 = map1.get(node1);
            }
            if (len2 > 0) {
                node2 = map2.get(node2);
            }
        }
        
        if (carry != 0) {
            ListNode node = new ListNode(1);
            node.next = prev;
            prev = node;
        }
        
        return prev;
    }
}
