class Solution {
    public List<String> restoreIpAddresses(String s) {
        if (s.length() < 4 || s.length() > 12)
            return new ArrayList<>();
        List<String> res = new ArrayList<>();
        String item = new String();
        helperIP(s, 0, item, res);
        return res;
    }

    // To find the valid IP address by doing DFS.
    public void helperIP(String s, int numOfDots, String item, List<String> res){

        /**
         * Base case: when to add item into res.
         * If I've had three parts, and also the last part is valid,
         * Then I can add it to "res".
         */
        if (numOfDots == 3 && isValid(s)){
            res.add(item + s);
            return;
        }

        /**
         * Start cutting.
         *
         * Now "i" should satisfies two conditions:
         * 1. "i" can only have three conditions, because length of the segment in IP address should be [1, 3].
         * 2. "i" should be smaller than the end of the s, because of the substring function.
         */
        for (int i = 0; i < 3 && i < s.length() - 1; i++){
            String temp = s.substring(0, i + 1);
            if (isValid(temp)){
                helperIP(s.substring(i + 1), numOfDots + 1, item + temp + '.', res);
            }
        }
    }

    // To find whether the string i cut is valid or not.
    public boolean isValid(String s){

        // If it begins with 0, then it better be "0", otherwise string like "01" is invalid.
        if (s.charAt(0) == '0')
            return s.equals("0");

        // If it's not 0, then it has to be in the scope of [1, 255] to be a valid number.
        int num = Integer.valueOf(s);
        return num > 0 && num < 256;
    }
}
