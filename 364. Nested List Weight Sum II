/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public int depthSumInverse(List<NestedInteger> nestedList) {
        int ans = 0;
        LinkedList<List<Integer>> tower = new LinkedList<>();
        Queue<NestedInteger> queue = new LinkedList<>(nestedList);
        
        while (!queue.isEmpty()) {
            List<Integer> thisLevel = new ArrayList<>();
            int size = queue.size();
            
            for (int i = 0; i < size; i++) {
                NestedInteger temp = queue.remove();
                if (temp.isInteger()) {
                    thisLevel.add(temp.getInteger());
                } else {
                    queue.addAll(temp.getList());
                }
            }
            
            tower.addFirst(thisLevel);
        }
        
        for (int i = 0; i < tower.size(); i++) {
            List<Integer> level = tower.get(i);
            int tempSum = 0;
            
            for (int ele : level) {
                tempSum += ele;
            }
            tempSum *= (i + 1);
            
            ans += tempSum;
        }
        
        return ans;
    }
}
