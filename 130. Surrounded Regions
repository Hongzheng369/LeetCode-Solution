class Solution {
    // Method 1.
    /*
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        
        int row = board.length;
        int col = board[0].length;
        
        // Check border first.
        for (int i = 0; i < row; i++) {
            checkBorder(board, i, 0, row, col);
            
            if (col > 1) {
                checkBorder(board, i, col - 1, row, col);
            }
        }
        for (int i = 1; i < col - 1; i++) {
            checkBorder(board, 0, i, row, col);
            
            if (row > 1) {
                checkBorder(board, row - 1, i, row, col);
            }
        }
        
        // Eliminate the inner 'O'.
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
        
        // Eliminate the '1'.
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == '1') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    // Check using DFS.
    private void checkBorder(char[][] board, int i, int j, int row, int col) {
        if (board[i][j] == 'O') {
            board[i][j] = '1';
            
            if (i > 0) {
                checkBorder(board, i - 1, j, row, col);
            }
            if (i < row - 1) {
                checkBorder(board, i + 1, j, row, col);
            }
            if (j > 0) {
                checkBorder(board, i, j - 1, row, col);
            }
            if (j < col - 1) {
                checkBorder(board, i, j + 1, row, col);
            }
        }
    }*/
    
    // Method 2. Upgrade version of method 1.
    public void solve(char[][] board) {
        if (board.length < 2 || board[0].length < 2) {
            return;
        }
        int m = board.length, n = board[0].length;

        // check the border.
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O')
                dfs(board, i, 0);
            if (board[i][n-1] == 'O')
                dfs(board, i, n-1);	
        }
        for (int j = 0; j < n; j++) {
            if (board[0][j] == 'O')
                dfs(board, 0, j);
            if (board[m-1][j] == 'O')
                dfs(board, m-1, j);	
        }
        
        //
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '1') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    
	private void dfs(char[][] board, int i, int j) {
		if (i < 0 || i > board.length - 1 || j < 0 || j > board[0].length - 1) {
			return;
		}
		if (board[i][j] != 'O') {
			return;
		}

		board[i][j] = '1';

		dfs(board, i - 1, j);
		dfs(board, i + 1, j);
		dfs(board, i, j - 1);
		dfs(board, i, j + 1);
	}
}
